#!/bin/bash

installed_db=/etc/setup/installed.db
installed_ini=/etc/setup/installed.ini
setuprc=/etc/setup/setup.rc
timestamp=/etc/setup/timestamp
available_ini=/etc/setup/available.ini

function show_usage() {
    echo -e "Usage:\n\t$0 [OPTIONS]\n"
    echo -e "OPTIONS:"
    echo -e "\t-h, --help\n\t\tShow the usage message and exit."
    echo -e "\t-L, --listfiles PACKAGE\n\t\tList files from installed PACKAGE."
    echo -e "\t-o, --owns FILE_PATTERN\n\t\tList packages that own files in FILE_PATTERN."
    echo -e "\t-s, --status REGEX\n\t\tReport version of installed packages where name matches REGEX."
    echo -e "\t-S, --search REGEX\n\t\tSearch available packages for name or description matching REGEX."
    echo -e "\t-d, --dependencies PACKAGE\n\t\tList packages required by PACKAGE."
    echo -e "\t-D, --dependencies-all PACKAGE\n\t\tList packages required by PACKAGE recursively."
    echo -e "\t-n, --neededby PACKAGE\n\t\tList installed packages that require this PACKAGE."
    echo -e "\t-N, --neededby-all PACKAGE\n\t\tList all available packages that require this PACKAGE."
    echo -e "\t-c, --clean\n\t\tClean cache of downloaded packages."
    echo -e "\t-m, --missing\n\t\tList packages needed by PACKAGE that are not installed (recursive)."
    echo -e "\t-t, --top\n\t\tList packages which depend on no others."
    echo -e "\t-i, --install PACKAGE[,PACKAGE...]\n\t\tInstall one or more packages."
    echo -e "\t-u, --upgrade\n\t\tUpgrade existing packages."
    echo -e "\t-A, --admin\n\t\tRun package manager as Administrator."
    echo -e "\t-w, --wait\n\t\tWait for $0 to finish before returning."
    echo -e "\t-r, --remove PACKAGE[,PACKAGE...]\n\t\tRemove one or more packages."
    echo -e "\t-M, --manager\n\t\tUse the cygwin package manager in semi-attended mode."
	echo -e "\t-I, --islands\n\t\tSearch for circular dependencies (package islands)."
	echo -e "\t-l, --list\n\t\tList installed packages."
    echo -e "\t-R, --remove-all PACKAGE[,PACKAGE...]\n\t\tRemove one or more packages and their dependencies (recursive).\n\t\tPreserves dependencies of other packages."
}

function log() {
    echo -e $1 >&2
}

function _get_installed() {
    grep -v "INSTALLED.DB" $installed_db | awk -F\  '{x=$2;sub(/\.tar.*$/,"",x);sub($1"-","",x);print $1" "x}'
}

function _get_setuprc_section() {
    section="$1"
    awk -F"\t" "/^\t/{if (s==\"$section\") {print \$2}} /^\\S.*/{s=\$1}" $setuprc
}

function _encode() {
    echo $1 | sed -e 's/\//%2f/g' -e 's/:/%3a/g'
}

function _get_setup() {
    setup_ini="$1/$(_encode $2)/x86_64/setup.ini"
    if [ -e "$setup_ini" ]; then
        cat "$setup_ini"
    else
        lynx -source $2/x86_64/setup.bz2 | bunzip2
    fi
}

function _generate_caches() {
    if [ ! -e "$available_ini" ] || [ "$timestamp" -nt "$available_ini" ]; then
        rm -f $available_ini
        last_cache="$(cygpath $(_get_setuprc_section last-cache))"
		for m in $(_get_setuprc_section last-mirror); do
			_get_setup "$last_cache" "$m" | grep -v -e '^#' -e '^release' -e '^arch' -e '^setup-' -e '^install:' -e '^source:' >> "$available_ini"
		done
        rm -f $installed_ini
        installed_pkgs="$(_get_installed)"
        reg1=${installed_pkgs// /$'\\n'.*version: }
        _pkg_record "^(${reg1//$'\n'/|})" 0 "$available_ini" > $installed_ini
    fi
}

function _pkg_record() {
    _generate_caches
    rs='\n@ '
    awk "BEGIN { IGNORECASE=$2; RS=\"$rs\" } /$1/{ print \"$rs\"\$0}" "$3"
}

function _user_search() {
    _pkg_record "^\\S*$1\\S*\\n|sdesc: \".*$1.*\"|ldesc: \".*$1.*\"" 1 "$available_ini"
}

function _get_deps() {
    _pkg_record "^$1\\n" 0 "$2" | grep "requires: " | sed -e 's/requires: //' -e 's/ \+/\n/g' | sort -u
}

function _get_base() {
    _pkg_record "category:.*\s(Base|_PostInstallLast)" 0 "$installed_ini" | grep ^@ | awk -F\  '{print $2}' | sort -u
}

function _get_deps_all() {
    for dep in $(_get_deps "$1" "$2"); do
        dep_cache="/etc/setup/$dep.deps"
        dep_stamp="/etc/setup/$dep.lst.gz"
        if [ -e "$dep_cache" ] && [ "$dep_cache" -nt "$dep_stamp" ]; then
            cat "$dep_cache"
        else
            echo -n "$dep $(_get_deps_all $dep "$2")" | tee "$dep_cache"
        fi
    done
}

function _get_missing() {
    all_deps="$1 $2"
    for dep in $(_get_deps "$1" "$available_ini"); do
        if [[ " $all_deps " != *" $dep "* ]] && ! grep -qe "^$dep\\s" "$installed_db"; then
            all_deps="$(_get_missing $dep "$all_deps")"
        fi
    done
    echo $all_deps
}

function _get_deps_reverse() {
    _pkg_record "\\nrequires:.*\\s+$1\\s+.*version:" 0 "$2" | grep ^@ | awk -F\  '{print $2}' | sort -u
}

function _get_orphans() {
    installed_pkgs="$(_get_installed | awk -F\  '{print $1}')"
    base_pkgs="$(_get_base)"
    search_re="requires:.*\\s(${installed_pkgs//[[:space:]]/|})\\s*\\n*"
    orphans_tmp=$(mktemp /tmp/cpkg.XXXXXX)
    _pkg_record "$search_re" 0 "$installed_ini" | awk '/^requires:/{x=$0;sub(/^requires:\s*/,"",x);gsub(/\s/,"\n",x);print x}' | sort -u > $orphans_tmp
    echo -e "$installed_pkgs\n$base_pkgs" | sort - $orphans_tmp | uniq -u
    rm $orphans_tmp
}

function _get_islands() {
    pkgs="$(_get_orphans) $(_get_base)"
    for o in $pkgs; do
        for dep in $(_get_deps "$o" "$installed_ini"); do
            if [[ " $pkgs " != *" $dep "* ]]; then
                pkgs=$(_get_deps_all $dep "$installed_ini")
            fi
        done
    done
    echo "$pkgs $(_get_installed | awk -F\  '{print $1}')" | sed 's/\s\+/\n/g' | sort | uniq -u
}

args=$@
if [ -z "$args" ]; then
    show_usage >&2
    exit 1
fi

opts=`getopt -o R:,l,I,M,r:,w,u,A,i:,t,m:,c,N:,n:,D:,d:,h,L:,S:,o:,s: -l remove-all:,list,islands,manager,remove:,wait,update,admin,install:,top,missing:,clean,neededby-all:,neededby:,dependencies-all:,dependencies:,help,listfiles:,owns:,search:,status: -n 'cpkg' -- "$@"`
[ $? != 0 ] && exit 1
eval set -- "$opts"

start_args=""
cmd_prefix=""
cmd_suffix="-B "

while true; do
	case "$1" in
		-h|--help)
			show_usage
			exit 0;;
        -L|--listfiles)
            shift
            cygcheck -l $1 | dos2unix
            exit $?;;
        -o|--owns)
            shift
            _pkgs="`cygcheck -f $@ | sed 's/\n//g'`"
            [ -z "$_pkgs" ] && exit 1
            grep "$_pkgs" $installed_db | awk -F\  '{x=$2;sub(/\.tar.*$/,"",x);sub($1"-","",x);print $1" "x}'
            exit $?;;
		-l|--list)
			_get_installed | awk -F\  '{print $1}'
			exit 0;;
        -s|--status)
            shift
            _get_installed | awk "\$1 ~ /$1/{print \$0}"
            exit $?;;
        -S|--search)
            shift
            _user_search "$1"
            exit 0;;
        -d|--dependencies)
            shift
            _get_deps "$1" "$available_ini"
            exit 0;;
        -D|--dependencies-all)
            shift
            _get_deps_all "$1" "$available_ini" | sed 's/ \+/\n/g' | grep -v "^$1$" | sort -u
            exit 0;;
        -n|--neededby)
            shift
            _get_deps_reverse "$1" "$installed_ini"
            exit 0;;
        -N|--neededby-all)
            shift
            _get_deps_reverse "$1" "$available_ini"
            exit 0;;
        -c|--clean)
            find $(cygpath $(_get_setuprc_section last-cache)) -type d -name 'release' | xargs rm -rf
            exit $?;;
        -m|--missing)
            shift
            _get_missing "$1" | sed 's/ \+/\n/g' | grep -v "^$1$" | sort -u
            exit 0;;
        -t|--top)
            _get_orphans
            exit 0;;
        -i|--install)
            shift
            cmd_suffix+="-P $1 "
            shift;;
        -u|--update)
            cmd_suffix+="-g "
            shift;;
        -A|--admin)
            isadmin=true
            cmd_suffix="${cmd_suffix/-B/}"
            shift;;
        -w|--wait)
            start_args+="-w "
            cmd_suffix+="-W "
            shift;;
        -r|--remove)
            shift
            cmd_suffix+="-x $1 "
            shift;;
        -M|--manager)
            cmd_suffix+="-M "
            shift;;
		-I|--islands)
			_get_islands
			exit 0;;
		-R|--remove-all)
			shift
			base_pkgs="$(_get_base)"
			for pkg in ${1//,/ }; do
				pkgs="$pkgs $(_get_deps_all "$pkg" "$installed_ini")"
			done
			cmd_suffix+="-x $(echo "$base_pkgs $base_pkgs $pkgs" | sed 's/ \+/\n/g' | sort | uniq -u | paste -sd , ),$1 "
			shift;;
		--)
			shift; break;;
		*)
			log "\e[31mInternal error!\e[m"
			exit 1;;
	esac
done
if [ "_$@" != "_" ]; then
	log "\e[31merror: extra arguments: $@\n\e[m"
	show_usage >&2
	exit 1
fi

function _cygsetup() {
    cygarch=$(uname -m)
    cygexe="setup-$cygarch.exe"
    cygurl="http://cygwin.com/$cygexe"
    last_cache=$(_get_setuprc_section last-cache)
    base_cmd="$(cygpath $last_cache)/$cygexe -Ovqd -l $last_cache -R $(cygpath -w /) -a $cygarch \
        -s http://sirius.starlig.ht/ -K http://sirius.starlig.ht/sirius.gpg \
        -s http://cygwin.mirror.constant.com/ \
        -s http://sourceware.mirrors.tds.net/pub/sourceware.org/cygwinports/ -K http://cygwinports.org/ports.gpg"
    mkdir -p $last_cache
    cd $last_cache
    if [ -e "/bin/wget" ]; then
        # download setup.exe (if newer)
        wget -nv -N $cygurl
    else
        lynx -source $cygurl > $cygexe
    fi
    chmod +x $cygexe
    if [ -n "$isadmin" ]; then
        chmod -R +wX /var/cache/rebase
    fi
    cygstart $start_args -- $cmd_prefix $base_cmd $cmd_suffix
}

_cygsetup

