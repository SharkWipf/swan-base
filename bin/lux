#!/bin/bash

CYGEXE=setup-x86_64.exe
EXEURL=http://cygwin.com/$CYGEXE
MIRROR=http://cygwin.mirror.constant.com/
PORTS_MIRROR=http://sourceware.mirrors.tds.net/pub/sourceware.org/cygwinports/
PORTS_GPG=http://cygwinports.org/ports.gpg
LUX_MIRROR=http://sirius.starlig.ht/
LUX_GPG=http://sirius.starlig.ht/sirius.gpg
CACHE=/var/cache/lux

if [ -e /etc/luxrc ]; then
    . /etc/luxrc
fi

function show_usage() {
    echo "Usage:           lux -h"
    echo " install/remove: lux [-uMAw] [-i pkg[,pkg...] [-R pkg|-r pkg[,pkg...]]"
    echo " clean cache:    lux -c"
    echo " pkg info:       lux [-d|-D|-m|-n|-L] pkg"
    echo " system info:    lux [-b|-l|-t]"
    echo " pkg search:     lux -s regex"
    echo -e "\n lux package manager\n"
    echo "options:"
    echo "   -h | --help          this help message"
    echo "   -i | --install       install specified packages separated by commas"
    echo "   -u | --upgrade       also upgrade installed packages"
    echo "   -r | --remove        remove specified packages separated by commas"
    echo "   -R | --remove-all    remove package and dependencies orphaned by package"
    echo "   -M | --manager       open cygwin package manager before install/remove"
    echo "   -A | --admin         run install/remove as administrator"
    echo "   -w | --wait          wait for install/remove to finish"
    echo "   -c | --clean         clean downloaded package cache"
    echo "   -v | --verbose       open a cmd.exe to show verbose output"
    echo "   -s | --search        search installed packages using regex"
    echo "   -S | --search-all    search available packages using regex"
    echo "   -d | --depends       get the depenendencies for a package"
    echo "   -D | --depends-all   get the depenendencies for a package recursively"
    echo "   -m | --missing       list the not-installed dependencies for a package"
    echo "   -n | --needs         list the packages which depend on specified installed package"
    echo "   -N | --needs-all     list the packages which depend on specifed package, including uninstalled"
    echo "   -l | --list          list installed packages"
    echo "   -L | --list-owned    list files installed by package"
    echo "   -f | --file          list package that owns the specifed file"
    echo "   -b | --base          list the base packages"
    echo "   -t | --top           get top-level/orphaned packages"
    echo "   -T | --islands       get circular-dependencies (islands)"
    echo -e "\nexample:\n"
    echo -e "   $0 -i tmux -r screen -u       install tmux, remove screen and update existing\n"
}

#setup cache
mkdir -p $CACHE/cache
cd $CACHE

function log() {
    echo -e $1 >&2
}

function encode() {
    echo $1 | sed -e 's/\//%2f/g' -e 's/:/%3a/g'
}

function get_setup() {
    setup_ini="${CACHE}/cache/$(encode $1)/x86_64/setup.ini"
    #log $setup_ini
    if [ -e "$setup_ini" ]; then
        #log "using existing setup.ini for $1"
        cat "$setup_ini" >> $2
    else
        #log "downloading setup.ini for $1"
        lynx -source $1/x86_64/setup.bz2 | bunzip2 >> $2
    fi
}

function check_db() {
    if [ ! -e "$CACHE/installed.lst" ] || [ "/etc/setup/installed.db" -nt "$CACHE/installed.lst" ]; then
        awk -F\  '{print $1}' /etc/setup/installed.db | grep -v INSTALLED.DB  > $CACHE/installed.lst
        rm -f "$CACHE/setup.db"
        rm -f "$CACHE/installed.db"
        rm -f "$CACHE/base.lst"
        setup_tmp=$(mktemp /tmp/lux.XXXXXX)
        get_setup $MIRROR $setup_tmp
        get_setup $PORTS_MIRROR $setup_tmp
        get_setup $LUX_MIRROR $setup_tmp

        grep -ve '^install:\|^source:' $setup_tmp | \
           sed 's/^sdesc:/summary:\n\t/' | \
           sed 's/^ldesc:/description:\n\t/' > $CACHE/setup.db
        rm -f $setup_tmp
    	dep_re=$(grep -v INSTALLED.DB /etc/setup/installed.db | awk -F\  '{x=$2;sub(/\.tar.*$/,"",x);sub($1"-","^"$1"\\n.*\\nversion:\\s",x);print x}'  | paste -sd '|')
        awk "BEGIN { RS=\"\n@ \" } /$dep_re/{print \"\n@ \"\$0}" $CACHE/setup.db > $CACHE/installed.db
        awk "BEGIN { RS=\"\n@ \" } /category:.*\sBase/{print \"\n@ \"\$0}" $CACHE/installed.db | grep -e '@' | sed 's/@ //' | \
            sed 's/\s/\n/g' | sort | uniq > $CACHE/base.lst
    fi
}

function get_pkg() {
    check_db
    awk "BEGIN { IGNORECASE=$3; RS=\"\n@ \" } /$1/{ print \"\n@ \"\$0}" $CACHE/$2.db
}

function pkg_search() {
    get_pkg "$1" setup $2
}

function pkg_search_inst() {
    get_pkg "$1" installed $2
}

function get_deps() {
    check_db
    if grep -qe "^$1\$" $CACHE/installed.lst; then
        do_search=pkg_search_inst
    else
        do_search=pkg_search
    fi
    if [ "x$do_search" = "xpkg_search" ]; then
        versions=$($do_search "^$1\\n" 0 | grep "^version:\s" | awk -F:\  '{print $2}' | sort -r)
        for ver in $versions; do
            if [ "x$version" = "x" ]; then
                version=$ver 
                break;
            fi
        done
    fi
    $do_search "^$1\\n.*version:\s$version" 0 | grep "^requires:\s" -m 1 | awk -F:\  '{print $2}' | sed 's/\s\+/\n/g' | sort - | uniq -u
}

function get_deps_recurse() {
    NEW="$1 $2"
    for dep in $(get_deps "$1"); do
        if [[ " $NEW " != *" $dep "* ]]; then
            NEW=$(get_deps_recurse $dep "$NEW")
        fi
    done
    echo $NEW
}

function get_orphans() {
    check_db
    installed_db=$(cat $CACHE/installed.lst)
    search_re="requires:.*\\s${installed_db//[[:space:]]/\\s*\\n*|requires:.*\\s}\\s*\\n*"
    orphans_tmp=$(mktemp /tmp/lux.XXXXXX)
    pkg_search_inst "$search_re" 0 | awk '/^requires:/{x=$0;sub(/^requires:\s*/,"",x);gsub(/\s/,"\n",x);print x}' | \
        sort $CACHE/installed.lst $CACHE/base.lst - | uniq -u > $orphans_tmp
    sort $orphans_tmp $CACHE/installed.lst | uniq -d
}

function get_missing() {
    NEW="$1 $2"
    for dep in $(get_deps "$1"); do
        if [[ " $NEW " != *" $dep "* ]] && ! grep -qe "^$dep\$" $CACHE/installed.lst; then
            NEW=$(get_missing $dep "$NEW")
        fi
    done
    echo $NEW
}

function get_islands() {
    log 'checking dependencies... (this can take a couple minutes)'
    check_db
    NEW="$(get_orphans) $(cat $CACHE/base.lst)"
    for o in $NEW; do
        for dep in $(get_deps "$o"); do
            if [[ " $NEW " != *" $dep "* ]]; then
                NEW=$(get_deps_recurse $dep "$NEW")
            fi
        done
    done
    echo $NEW | sed 's/\s\+/\n/g' | sort - $CACHE/installed.lst | sort | uniq -u
}

function get_rev_deps() {
    pkg_search_inst "\\nrequires:.*\\s$1\\s.*version:" 0 | grep @ | awk -F\  '{print $2}'
}

function get_rev_deps_ex() {
    pkg_search "\\nrequires:.*\\s$1\\s.*version:" 0 | grep @ | awk -F\  '{print $2}'
}

ARGS=$@
if [ -z "$ARGS" ]; then
    echo -e "\e[31merror: arguments required\n\e[m" >&2
    show_usage >&2
    exit 1
fi

OPTS=`getopt -o vAwi:ur:R:lL:bMchs:S:d:D:tm:n:f:TN: -l verbose,needs-all:,islands,file:,admin,base,needs:,wait,install:,upgrade,remove:,remove-all:,list,list-owned:,manager,clean,help,search:,search-all:,depends:,depends-all:,top,missing: -n 'lux' -- "$@"`
[ $? != 0 ] && exit 1
eval set -- "$OPTS"

ADMIN="-B"

while true; do
    case "$1" in
        -h|--help)
            show_usage
            exit 0;;
        -M|--manager)
            MANAGER="-M"
            shift;;
        -w|--wait)
            WAIT="-W"
            CYGWAIT="--wait"
            shift;;
        -A|--admin)
            ADMIN=""
            shift;;
        -v|--verbose)
            CMDSH="cmd /k"
            shift;;
        -f|--file)
            grep `cygcheck -f $2 | sed 's/\n//g'` /etc/setup/installed.db | awk -F\  '{print $1}'
            exit 0;;
        -s|--search)
            pkg_search_inst "^\\S*$2\\S*|summary:.*$2.*description:|description:.*$2.*category:" 1
            exit 0;;
        -S|--search-all)
            pkg_search "^\\S*$2\\S*|summary:.*$2.*description:|description:.*$2.*category:" 1
            exit 0;;
        -d|--depends)
            get_deps "$2"
            exit 0;;
        -D|--depends-all)
    	    get_deps_recurse "$2" | sed 's/\s\+/\n/g' | sort | uniq 
            exit 0;;
        -n|--needs)
            get_rev_deps "$2" | sed 's/\s\+/\n/g' | sort | uniq
            exit 0;;
        -N|--needs-all)
            get_rev_deps_ex "$2" | sed 's/\s\+/\n/g' | sort | uniq
            exit 0;;
        -m|--missing)
    	    get_missing "$2" | sed 's/\s\+/\n/g' | sort | uniq 
            exit 0;;
        -t|--top)
            get_orphans
            exit 0;;
        -T|--islands)
            get_islands
            exit 0;;
        -i|--install)
            INSTALL="-P $2"
            shift 2;;
        -u|--upgrade)
            UPGRADE="-g"
            shift;;
        -r|--remove)
            REMOVE="-x $2"
            shift 2;;
        -R|--remove-all)
            r_tmp=$(mktemp /tmp/lux.XXXXXX)
            get_deps_recurse "$2" | sed 's/\s\+/\n/g' > $r_tmp
            REMOVE="-x "$(sort $r_tmp $CACHE/base.lst | uniq -d | sort - $r_tmp | uniq -u | paste -sd ,)
            rm $r_tmp
            shift 2;;
        -l|--list)
            check_db; cat $CACHE/installed.lst
            exit 0;;
    	-L|--list-owned)
            cygcheck -l $2
    	    exit 0;;
        -b|--base)
            check_db
            cat $CACHE/base.lst
            exit 0;;
        -c|--clean)
            find $CACHE -type d -name 'release' | xargs rm -rf
            exit 0;;
        --) 
            shift; break;;
        *) 
            echo "\e[31mInternal error!\e[m"
            exit 1;;
    esac
done
if [ "_$@" != "_" ]; then
    echo -e "\e[31merror: extra arguments: $@\n\e[m" >&2
    show_usage >&2
    exit 1
fi
# download setup.exe (if newer)
if [ -e "/bin/wget" ]; then
    wget -nv -N $EXEURL
else
    lynx -source $EXEURL > $CYGEXE
fi
chmod +x $CYGEXE
chmod -R +wX /var/cache/rebase

cygstart $CYGWAIT -- $CMDSH $CYGEXE -s $LUX_MIRROR -s $MIRROR -s $PORTS_MIRROR -K $LUX_GPG -K $PORTS_GPG -v -q -d -l $(cygpath -w $CACHE/cache) -R $(cygpath -w /) $WAIT $ADMIN $INSTALL $UPGRADE $REMOVE $MANAGER

